{"ast":null,"code":"var _jsxFileName = \"/Users/pachihhil/Projects/BuildOps/fullstack-coding-challange/src/components/pages/EditEmployees.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Typography, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport { includes, isEmpty } from \"lodash\";\nconst useStyles = makeStyles(theme => createStyles({\n  errorText: {\n    fontSize: \"14px\",\n    color: \"#f44336\"\n  }\n}));\n\nconst EditEmployee = props => {\n  const classes = useStyles();\n  const [isError, setIsError] = useState(false);\n  const [skills, setSkills] = useState([]);\n  const [skillSets, setSkillSets] = useState([]);\n  const [formValue, setFormValue] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    skills: {\n      id: \"\",\n      name: \"\"\n    }\n  });\n  const {\n    isOpen,\n    handleClose,\n    onSave,\n    match: {\n      params\n    }\n  } = props;\n  useEffect(() => {\n    fetchData();\n\n    if (params.id) {\n      if (params.action === \"edit\") {\n        getEmployeeById(params.id);\n      }\n    }\n  }, []);\n\n  const fetchData = async () => {\n    var _data$listSkills;\n\n    const query = ` query{\n      listSkills{\n        items{\n          createdAt\n          id\n          name\n          updatedAt\n        }\n      }\n    }`;\n    const {\n      data\n    } = await API.graphql(graphqlOperation(query));\n    setSkills(data === null || data === void 0 ? void 0 : (_data$listSkills = data.listSkills) === null || _data$listSkills === void 0 ? void 0 : _data$listSkills.items);\n  };\n\n  const getEmployeeById = async id => {\n    var _data$getEmployee, _data$getEmployee$ski;\n\n    const getQuery = `query{\n      getEmployee(id: \"${id}\") {\n        firstName\n        id\n        lastName\n        skills {\n          id\n          name\n        }\n      }\n    }`;\n    const {\n      data\n    } = await API.graphql(graphqlOperation(getQuery));\n    setFormValue(data === null || data === void 0 ? void 0 : data.getEmployee);\n    setSkillSets([...skillSets, data === null || data === void 0 ? void 0 : (_data$getEmployee = data.getEmployee) === null || _data$getEmployee === void 0 ? void 0 : (_data$getEmployee$ski = _data$getEmployee.skills) === null || _data$getEmployee$ski === void 0 ? void 0 : _data$getEmployee$ski.id]);\n  };\n\n  const handleChange = id => {\n    const selectedId = skillSets && skillSets.filter(a => a === id);\n\n    if (selectedId.length) {\n      const removeIds = skillSets && skillSets.filter(a => a !== id);\n      setSkillSets(removeIds.filter(Boolean));\n    } else {\n      setSkillSets([...skillSets, id].filter(Boolean));\n    }\n  };\n\n  const isChecked = id => {\n    if (includes(skillSets, id)) return true;else return false;\n  };\n\n  const handleFormData = (key, value) => {\n    setFormValue({ ...formValue,\n      [key]: value\n    });\n  };\n\n  const onSubmit = () => {\n    if (isEmpty(formValue.firstName)) {\n      setIsError(true);\n    } else if (isEmpty(formValue.lastName)) {\n      setIsError(true);\n    } else if (!skillSets.length) {\n      setIsError(true);\n    } else {\n      onSave({ ...formValue,\n        employeeSkillsId: skillSets.length ? skillSets[0] : \"\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: isOpen,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, params.action === \"edit\" ? \"Update\" : \"Create new\", \" employee\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    error: isError && !(formValue === null || formValue === void 0 ? void 0 : formValue.firstName),\n    autoFocus: true,\n    value: formValue === null || formValue === void 0 ? void 0 : formValue.firstName,\n    margin: \"dense\",\n    id: \"name\",\n    label: \"First Name\",\n    onChange: e => handleFormData(\"firstName\", e.target.value),\n    helperText: \"Please enter firstname\",\n    type: \"text\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    error: isError && !(formValue === null || formValue === void 0 ? void 0 : formValue.lastName),\n    value: formValue === null || formValue === void 0 ? void 0 : formValue.lastName,\n    margin: \"dense\",\n    onChange: e => handleFormData(\"lastName\", e.target.value),\n    id: \"name\",\n    label: \"Last Name\",\n    type: \"text\",\n    helperText: \"Please enter lastname\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      paddingTop: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \"Skills\"), skills && skills.map(item => {\n    return /*#__PURE__*/React.createElement(FormControlLabel, {\n      key: item === null || item === void 0 ? void 0 : item.id,\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: isChecked(item === null || item === void 0 ? void 0 : item.id),\n        onChange: e => handleChange(e.target.value),\n        name: \"checkedB\",\n        color: \"primary\",\n        value: item === null || item === void 0 ? void 0 : item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }),\n      label: item === null || item === void 0 ? void 0 : item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    });\n  }), isError && skillSets.length < 1 && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \"Please select atleast one skill.\")), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    onClick: onSubmit,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n};\n\nexport { EditEmployee };","map":{"version":3,"sources":["/Users/pachihhil/Projects/BuildOps/fullstack-coding-challange/src/components/pages/EditEmployees.js"],"names":["React","useEffect","useState","createStyles","makeStyles","API","graphqlOperation","Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","Typography","FormControlLabel","Checkbox","includes","isEmpty","useStyles","theme","errorText","fontSize","color","EditEmployee","props","classes","isError","setIsError","skills","setSkills","skillSets","setSkillSets","formValue","setFormValue","firstName","lastName","id","name","isOpen","handleClose","onSave","match","params","fetchData","action","getEmployeeById","query","data","graphql","listSkills","items","getQuery","getEmployee","handleChange","selectedId","filter","a","length","removeIds","Boolean","isChecked","handleFormData","key","value","onSubmit","employeeSkillsId","e","target","paddingTop","map","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Typography, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport { includes, isEmpty } from \"lodash\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    errorText: {\n      fontSize: \"14px\",\n      color: \"#f44336\",\n    },\n  })\n);\n\nconst EditEmployee = (props) => {\n  const classes = useStyles();\n  const [isError, setIsError] = useState(false);\n  const [skills, setSkills] = useState([]);\n  const [skillSets, setSkillSets] = useState([]);\n  const [formValue, setFormValue] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    skills: {\n      id: \"\",\n      name: \"\",\n    },\n  });\n  const {\n    isOpen,\n    handleClose,\n    onSave,\n    match: { params },\n  } = props;\n  useEffect(() => {\n    fetchData();\n    if (params.id) {\n      if (params.action === \"edit\") {\n        getEmployeeById(params.id);\n      }\n    }\n  }, []);\n  const fetchData = async () => {\n    const query = ` query{\n      listSkills{\n        items{\n          createdAt\n          id\n          name\n          updatedAt\n        }\n      }\n    }`;\n    const { data } = await API.graphql(graphqlOperation(query));\n    setSkills(data?.listSkills?.items);\n  };\n\n  const getEmployeeById = async (id) => {\n    const getQuery = `query{\n      getEmployee(id: \"${id}\") {\n        firstName\n        id\n        lastName\n        skills {\n          id\n          name\n        }\n      }\n    }`;\n    const { data } = await API.graphql(graphqlOperation(getQuery));\n    setFormValue(data?.getEmployee);\n    setSkillSets([...skillSets, data?.getEmployee?.skills?.id]);\n  };\n\n  const handleChange = (id) => {\n    const selectedId = skillSets && skillSets.filter((a) => a === id);\n    if (selectedId.length) {\n      const removeIds = skillSets && skillSets.filter((a) => a !== id);\n      setSkillSets(removeIds.filter(Boolean));\n    } else {\n      setSkillSets([...skillSets, id].filter(Boolean));\n    }\n  };\n  const isChecked = (id) => {\n    if (includes(skillSets, id)) return true;\n    else return false;\n  };\n\n  const handleFormData = (key, value) => {\n    setFormValue({ ...formValue, [key]: value });\n  };\n\n  const onSubmit = () => {\n    if (isEmpty(formValue.firstName)) {\n      setIsError(true);\n    } else if (isEmpty(formValue.lastName)) {\n      setIsError(true);\n    } else if (!skillSets.length) {\n      setIsError(true);\n    } else {\n      onSave({\n        ...formValue,\n        employeeSkillsId: skillSets.length ? skillSets[0] : \"\",\n      });\n    }\n  };\n  return (\n    <div>\n      <Dialog\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          {params.action === \"edit\" ? \"Update\" : \"Create new\"} employee\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            error={isError && !formValue?.firstName}\n            autoFocus\n            value={formValue?.firstName}\n            margin=\"dense\"\n            id=\"name\"\n            label=\"First Name\"\n            onChange={(e) => handleFormData(\"firstName\", e.target.value)}\n            helperText=\"Please enter firstname\"\n            type=\"text\"\n            fullWidth\n          />\n          <TextField\n            error={isError && !formValue?.lastName}\n            value={formValue?.lastName}\n            margin=\"dense\"\n            onChange={(e) => handleFormData(\"lastName\", e.target.value)}\n            id=\"name\"\n            label=\"Last Name\"\n            type=\"text\"\n            helperText=\"Please enter lastname\"\n            fullWidth\n          />\n          <Typography style={{ paddingTop: \"1rem\" }}>Skills</Typography>\n          {skills &&\n            skills.map((item) => {\n              return (\n                <FormControlLabel\n                  key={item?.id}\n                  control={\n                    <Checkbox\n                      checked={isChecked(item?.id)}\n                      onChange={(e) => handleChange(e.target.value)}\n                      name=\"checkedB\"\n                      color=\"primary\"\n                      value={item?.id}\n                    />\n                  }\n                  label={item?.name}\n                />\n              );\n            })}\n          {isError && skillSets.length < 1 && (\n            <div className={classes.errorText}>\n              Please select atleast one skill.\n            </div>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n\n          <Button type=\"submit\" onClick={onSubmit} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport { EditEmployee };\n"]},"metadata":{},"sourceType":"module"}